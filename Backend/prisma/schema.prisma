// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema   

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base model con campos comunes para usuarios
model BaseUser {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String
  image         String?
  status        Boolean        @default(false)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  administrator Administrator?
  client        Client?
}

// Modelo para administradores del sitio
model Administrator {
  id           String         @id @default(uuid())
  baseUser     BaseUser       @relation(fields: [baseUserId], references: [id], onDelete: Cascade)
  baseUserId   String         @unique
  salary       Int?
  mouthSalary  Int            @default(0)
  role         Role           @default(MODERATOR)
  sede         Sede?          @relation(fields: [sedeId], references: [id], onDelete: Cascade)
  sedeId       String?
  notification Notification[]
  orders       Order[]
  ratings      Rating[]
  Payment      Payment[]
}

// Modelo para clientes
model Client {
  id           String         @id @default(uuid())
  baseUser     BaseUser       @relation(fields: [baseUserId], references: [id], onDelete: Cascade)
  baseUserId   String         @unique
  orders       Order[]
  ratings      Rating[]
  comments     Comment[]
  payments     Payment[]
  notification Notification[]
}

enum Role {
  MODERATOR
  OWNER
}

model Category {
  id            String    @id @default(uuid())
  name          String    @unique
  products      Product[]
  profitsBySell Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id                    String                 @id @default(uuid())
  name                  String
  description           String
  price                 Float
  categoryId            String
  investments           Int?
  imagen                String?
  color                 String?
  ram                   Int?
  storage               Int?
  battery               Int?
  mpxCameraFront        Int?
  mpxCameraBack         Int?
  ratingAverage         Float                  @default(1)
  inventoryCount        Int                    @default(1)
  category              Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  inventoryTransactions InventoryTransaction[]
  orderItems            OrderItem[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Rating                Rating[]
  comment               Comment[]
  Sede                  Sede?                  @relation(fields: [sedeId], references: [id], onDelete: Cascade)
  sedeId                String?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Rating {
  id              String         @id @default(uuid())
  value           Int            @default(1) // Rango: 1-5
  productID       String
  product         Product        @relation(fields: [productID], references: [id], onDelete: Cascade)
  // Relación con Client
  client          Client?        @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId        String?
  // Relación con Administrator
  administrator   Administrator? @relation(fields: [administratorId], references: [id], onDelete: NoAction)
  administratorId String?
  createdAt       DateTime       @default(now())
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  productId       String
  product         Product         @relation(fields: [productId], references: [id])
  quantity        Int
  transactionType TransactionType
  date            DateTime        @default(now())
}

enum TransactionType {
  ENTRY
  SALE
}

model Order {
  id          Int            @id @default(autoincrement())
  pending     Boolean        @default(true)
  clientId    String?
  client      Client?        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  adminId     String?
  admin       Administrator? @relation(fields: [adminId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  totalAmount Float          @default(0)
  payment     Payment?
  createdAt   DateTime       @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Payment {
  id              Int            @id @default(autoincrement())
  orderId         Int            @unique
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount          Float
  transactionID   String?
  fastDelivery    Boolean
  paymentStatus   PaymentStatus  @default(PENDING)
  createdAt       DateTime       @default(now())
  PaymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  client          Client?        @relation(fields: [userId], references: [id])
  userId          String?
  adminId         String?
  admin           Administrator? @relation(fields: [adminId], references: [id])
}

model PaymentMethod {
  id             String         @id @default(uuid())
  cardImage      String
  cardNumber     String?
  phoneNumber    String?
  createdAt      DateTime       @default(now())
  payment        Payment[]
  paymentOptions PaymentOptions
}

enum PaymentOptions {
  TRANSFER_USD
  TRANSFER_CUP
  CASH
  QVAPAY
  ZELLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Sede {
  id          String               @id @default(uuid())
  image       String
  phone       Int                  @unique
  direction   String
  rent        Int
  losses      Investments_Losses[]
  finalLosses Int                  @default(0)
  netProfits  Int                  @default(0)
  workers     Administrator[]
  producto    Product[]
}

model Investments_Losses {
  id          String   @id @default(uuid())
  price       Int
  description String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  Sede        Sede?    @relation(fields: [sedeId], references: [id], onDelete: Cascade)
  sedeId      String?
}

model CurrencyExchange {
  id          String   @id @default(uuid())
  cup         Float
  eur         Float
  cad         Float
  gbp         Float
  zelle       Float
  cupTransfer Float
  mlcTransfer Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id              String           @id @default(uuid())
  message         String
  isRead          Boolean          @default(false)
  type            NotificationType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relación con Client
  clientId        String?
  client          Client?          @relation(fields: [clientId], references: [id])
  // Relación con Administrator
  administratorId String?
  administrator   Administrator?   @relation(fields: [administratorId], references: [id])
}

enum NotificationType {
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  REGISTER_SUCCESS
}

model TempInventoryReservation {
  id        String   @id @default(uuid())
  userId    String // ID del usuario que hizo el pedido
  orderId   Int // ID de la orden
  productId String // ID del producto reservado
  quantity  Int // Cantidad de productos reservados
  expiresAt DateTime // Tiempo de expiración de la reserva
  createdAt DateTime @default(now())

  @@index([userId, orderId])
}
